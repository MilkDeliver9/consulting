#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('consulting:server');
var http = require('http');
var getDBConnection = require('../controllers/dbConnection');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 *  RealTime socket.io.
 */

var io = require('socket.io')(server);

io.on('connection', function (socket) {
    var bisCol;
    var weatherCol;
    var bisEmitter;
    var weatherEmitter;

    getDBConnection(function(err, db){
        // get BIS Data
        var consultingDB = db.db("consulting");
        bisCol = consultingDB.collection("bisData");

        bisCol.findOne(function(err, item){
            socket.emit('bisData', item);
        });

        weatherCol = consultingDB.collection("weatherData");

        weatherCol.findOne(function(err, item){
            socket.emit('weatherData', item[item.length-1]);
        });

    });

    bisEmitter = setInterval(function(){
        bisCol.findOne(function(err, item){
            socket.emit('bisData', item);
        });
    }, 5000);

    weatherEmitter = setInterval(function(){
        weatherCol.findOne(function(err, item){
            socket.emit('weatherData', item[item.length-1]);
        });
    }, 900000);


    socket.on('disconnect', function(){
        clearInterval(bisEmitter); clearInterval(weatherEmitter);});
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}